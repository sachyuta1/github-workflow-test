name: Release Management & Docker Image Build

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
    types:
      - closed
  workflow_run:
    workflows: ["Go Lint"]
    types:
      - completed
  workflow_dispatch:

jobs:
  determine-version:
    runs-on: self-hosted
    outputs:
      new_version: ${{ steps.version.outputs.NEW_VERSION }}
      release_type: ${{ steps.version.outputs.RELEASE_TYPE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine New Version
        id: version
        run: |
          git fetch --tags --force
          LATEST_TAG=$(git tag -l "v[0-9]*.[0-9]*.[0-9]*" | sort -V | tail -n 1 | sed 's/v//')

          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="0.0.0"
          fi

          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"
          RELEASE_TYPE="patch"

          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            MERGE_MESSAGE=$(git log -1 --pretty=%B)
            if echo "$MERGE_MESSAGE" | grep -q "Merge branch 'dev'"; then
              MAJOR_BUMP=$(git diff $(git describe --tags --abbrev=0) HEAD --name-only | grep -E 'breaking_changes|major_feature' | wc -l)
              if [[ "$MAJOR_BUMP" -gt 0 ]]; then
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                RELEASE_TYPE="major"
              else
                MINOR=$((MINOR + 1))
                PATCH=0
                RELEASE_TYPE="minor"
              fi
            fi
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/heads/fix/* ]]; then
            PATCH=$((PATCH + 1))
            RELEASE_TYPE="patch"
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "RELEASE_TYPE=$RELEASE_TYPE" >> $GITHUB_ENV
          echo "RELEASE_TYPE=$RELEASE_TYPE" >> $GITHUB_OUTPUT

  build-and-release:
    needs: determine-version
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Up Rollback on Failure
        run: |
          git stash save --keep-index "PRE-RELEASE-STATE"

      - name: Update `routes/version.go`
        run: |
          sed -i "s#v0.0.0#v${{ needs.determine-version.outputs.new_version }}#g" routes/version.go

      - name: Commit Version Update
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add routes/version.go
          git commit -m "Update version to v${{ needs.determine-version.outputs.new_version }}"
          git push origin HEAD:${{ github.ref_name }}

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Update Helm Chart Version
        run: |
          sed -i "s/version:.*/version: ${{ needs.determine-version.outputs.new_version }}/g" ./charts/Chart.yaml
          sed -i "s/appVersion:.*/appVersion: ${{ needs.determine-version.outputs.new_version }}/g" ./charts/Chart.yaml

      - name: Package and Push Helm Chart
        run: |
          mkdir -p .cr-release-packages
          helm package ./charts --version=${{ needs.determine-version.outputs.new_version }} --destination .cr-release-packages
          helm repo index .cr-release-packages

      - name: Create Release Branch
        run: |
          if [[ "${{ needs.determine-version.outputs.release_type }}" == "major" ]]; then
            BRANCH_NAME="release/${{ needs.determine-version.outputs.new_version }}"
          elif [[ "${{ needs.determine-version.outputs.release_type }}" == "minor" ]]; then
            BRANCH_NAME="minor/${{ needs.determine-version.outputs.new_version }}"
          else
            BRANCH_NAME="patch/${{ needs.determine-version.outputs.new_version }}"
          fi

          git checkout -b $BRANCH_NAME
          git push origin $BRANCH_NAME

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.determine-version.outputs.new_version }}
          name: Release v${{ needs.determine-version.outputs.new_version }}
          draft: false
          prerelease: false
          body: |
            ðŸš€ **Release ${{ needs.determine-version.outputs.new_version }}**  
            **Branch**: `${{ github.ref_name }}`  
            **Type**: `${{ needs.determine-version.outputs.release_type }}`  

      - name: Rollback on Failure
        if: failure()
        run: |
          echo "Rolling back changes..."
          git stash pop || true
          git push origin --delete $BRANCH_NAME || true
          git tag -d v${{ needs.determine-version.outputs.new_version }} || true
          git push origin :v${{ needs.determine-version.outputs.new_version }} || true

  build-docker-image:
    needs: determine-version
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get Latest Version from Find Latest Tag
        id: get_version
        run: |
          LATEST_VERSION="${{ github.event.workflow_run.outputs.latest_version }}"
          echo "Latest version from Find Latest Tag: $LATEST_VERSION"
          echo "NEW_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
          echo "NEW_VERSION=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: Update `routes/version.go` Before Docker Build
        run: |
          sed -i "s#v0.0.0#$TAG#g" routes/version.go

      - name: Build and Push Docker Image
        run: |
          echo "${{ secrets.TOKEN_GH }}" > github_token.txt
          REPO_NAME=${{ github.event.repository.name }}
          IMAGE_NAME="devsds/$REPO_NAME"
          export DOCKER_BUILDKIT=1
          docker build --secret id=github_token,src=github_token.txt -t $IMAGE_NAME:$TAG .
          docker push $IMAGE_NAME:$TAG

      - name: Rollback on Failure
        if: failure()
        run: |
          echo "Rolling back changes..."
          git reset --hard HEAD~1 || true
          git push --force || true
