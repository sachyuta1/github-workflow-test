{
  "components": {
    "examples": {
      "ClientResponse": {
        "description": "Example response after creating a client.",
        "summary": "Client Creation Response",
        "value": {
          "data": {
            "country": "Japan",
            "created_at": "2025-02-05T14:32:00Z",
            "created_by": "admin@redcloudcomputing.com",
            "id": "4d2e421e-784a-424e-ac0f-f9487e3ac95c",
            "manager_emails": [
              "vbhadauriya@redcloudcomputing.com"
            ],
            "name": "RCC-NEww",
            "updated_at": "2025-02-05T14:32:00Z"
          },
          "message": "Client created successfully.",
          "success": true
        }
      },
      "ClientsListResponse": {
        "description": "Example response after listing clients.",
        "summary": "Clients List Response",
        "value": {
          "data": [
            {
              "country": "Japan",
              "created_at": "2025-02-05T14:32:00Z",
              "created_by": "admin@redcloudcomputing.com",
              "id": "4d2e421e-784a-424e-ac0f-f9487e3ac95c",
              "manager_emails": [
                "vbhadauriya@redcloudcomputing.com"
              ],
              "name": "RCC-NEww",
              "updated_at": "2025-02-05T14:32:00Z"
            },
            {
              "country": "Japan",
              "created_at": "2025-02-05T14:32:00Z",
              "created_by": "admin@redcloudcomputing.com",
              "id": "4d2e421e-784a-624e-ac0f-f9487e3ac95c",
              "manager_emails": [
                "vbhadauriya@redcloudcomputing.com"
              ],
              "name": "RCC-Sample",
              "updated_at": "2025-02-05T14:32:00Z"
            }
          ],
          "message": "Clients retrieved successfully.",
          "meta": {
            "page": 1,
            "page_size": 10,
            "total": 2
          },
          "success": true
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad Request",
        "examples": [
          {
            "error": "Bad Request",
            "message": "Invalid input data.",
            "success": false
          }
        ],
        "properties": {
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          }
        },
        "required": [
          "success",
          "message",
          "error"
        ],
        "type": "object"
      },
      "Conflict": {
        "description": "Conflict",
        "examples": [
          {
            "error": "Conflict.",
            "message": "The resource already exists.",
            "success": false
          }
        ],
        "properties": {
          "error": {
            "description": "Error details, if any",
            "example": "Conflict.",
            "type": "string"
          },
          "message": {
            "description": "A message providing additional information",
            "example": "The resource already exists.",
            "type": "string"
          },
          "success": {
            "description": "Indicates the request failed due to a conflict in the request",
            "example": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Forbidden": {
        "description": "Forbidden",
        "examples": [
          {
            "error": "Forbidden.",
            "message": "You do not have permission to access this resource.",
            "success": false
          }
        ],
        "properties": {
          "error": {
            "description": "Error details, if any",
            "example": "Forbidden.",
            "type": "string"
          },
          "message": {
            "description": "A message providing additional information",
            "example": "You do not have permission to access this resource.",
            "type": "string"
          },
          "success": {
            "description": "Indicates the request failed due to insufficient permissions",
            "example": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "InternalServerError": {
        "description": "Internal Server Error",
        "examples": [
          {
            "error": "Internal Server Error.",
            "message": "An unexpected error occurred.",
            "success": false
          }
        ],
        "properties": {
          "error": {
            "description": "Error details, if any",
            "example": "Internal Server Error.",
            "type": "string"
          },
          "message": {
            "description": "A message providing additional information",
            "example": "An unexpected error occurred.",
            "type": "string"
          },
          "success": {
            "description": "Indicates the request failed due to a server error",
            "example": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "NotFound": {
        "description": "Not Found",
        "examples": [
          {
            "error": "Not Found.",
            "message": "Resource not found.",
            "success": false
          }
        ],
        "properties": {
          "error": {
            "description": "Error details, if any",
            "example": "Not Found.",
            "type": "string"
          },
          "message": {
            "description": "A message providing additional information",
            "example": "Resource not found.",
            "type": "string"
          },
          "success": {
            "description": "Indicates the requested resource could not be found",
            "example": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "examples": [
          {
            "error": "Unauthorized.",
            "message": "Unauthorized access.",
            "success": false
          }
        ],
        "properties": {
          "error": {
            "description": "Error details, if any",
            "example": "Unauthorized.",
            "type": "string"
          },
          "message": {
            "description": "A message providing additional information",
            "example": "Unauthorized access.",
            "type": "string"
          },
          "success": {
            "description": "Indicates the request failed due to authentication failure",
            "example": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "UnprocessableEntity": {
        "description": "Unprocessable Entity",
        "examples": [
          {
            "error": "Unprocessable Entity.",
            "message": "The request contains invalid data.",
            "success": false
          }
        ],
        "properties": {
          "error": {
            "description": "Error details, if any",
            "example": "Unprocessable Entity.",
            "type": "string"
          },
          "message": {
            "description": "A message providing additional information",
            "example": "The request contains invalid data.",
            "type": "string"
          },
          "success": {
            "description": "Indicates the request failed due to invalid syntax or data",
            "example": false,
            "type": "boolean"
          }
        },
        "type": "object"
      }
    },
    "schemas": {
      "ClientRequest": {
        "additionalProperties": false,
        "description": "Client schema for creating a new client.",
        "examples": [
          {
            "country": "Japan",
            "manager_emails": [
              "vbhadauriya@redcloudcomputing.com"
            ],
            "name": "RCC-NEww"
          }
        ],
        "properties": {
          "country": {
            "description": "The country where the client is located.",
            "example": "Japan",
            "type": "string"
          },
          "manager_emails": {
            "description": "List of manager email addresses.",
            "example": [
              "vbhadauriya@redcloudcomputing.com"
            ],
            "items": {
              "example": "vbhadauriya@redcloudcomputing.com",
              "format": "email",
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the client.",
            "example": "RCC-NEww",
            "type": "string"
          }
        },
        "required": [
          "name",
          "manager_emails",
          "country"
        ],
        "title": "Client",
        "type": "object"
      },
      "ClientResponse": {
        "additionalProperties": false,
        "description": "Response schema for a client.",
        "examples": [
          {
            "country": "Japan\"",
            "created_at": "2025-02-05T14:32:00Z",
            "created_by": "admin@redcloudcomputing.com",
            "id": "4d2e421e-784a-424e-ac0f-f9487e3ac95c",
            "manager_emails": [
              "vbhadauriya@redcloudcomputing.com"
            ],
            "name": "RCC-NEww",
            "updated_at": "2025-02-05T14:32:00Z"
          }
        ],
        "properties": {
          "country": {
            "description": "The country where the client is located.",
            "example": "Japan",
            "type": "string"
          },
          "created_at": {
            "description": "Timestamp when the client was created.",
            "example": "2025-02-05T14:32:00Z",
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "description": "Email of the user who created the client record.",
            "example": "admin@redcloudcomputing.com",
            "format": "email",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the client.",
            "example": "4d2e421e-784a-424e-ac0f-f9487e3ac95c",
            "format": "uuid",
            "type": "string"
          },
          "manager_emails": {
            "description": "List of manager email addresses.",
            "example": [
              "vbhadauriya@redcloudcomputing.com"
            ],
            "items": {
              "example": "vbhadauriya@redcloudcomputing.com",
              "format": "email",
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the client.",
            "example": "RCC-NEww",
            "type": "string"
          },
          "updated_at": {
            "description": "Timestamp when the client was last updated.",
            "example": "2025-02-05T14:32:00Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "manager_emails",
          "country",
          "created_at",
          "updated_at",
          "created_by"
        ],
        "title": "Client Response",
        "type": "object"
      },
      "CreateIssueLinkRequest": {
        "additionalProperties": false,
        "description": "Request schema for creating an issue link.",
        "properties": {
          "title": {
            "description": "Title of the link.",
            "type": "string"
          },
          "url": {
            "description": "URL associated with the issue.",
            "type": "string"
          }
        },
        "required": [
          "title",
          "url"
        ],
        "type": "object"
      },
      "FileUploadRequest": {
        "description": "Request payload for uploading a file to a project.",
        "example": {
          "files": [
            "design_mockup.png"
          ]
        },
        "properties": {
          "files": {
            "description": "List of files to be uploaded (multipart/form-data).",
            "items": {
              "format": "binary",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "files"
        ],
        "title": "File Upload Request",
        "type": "object"
      },
      "FileUploadResponse": {
        "properties": {
          "created_at": {
            "description": "Created timestamp.",
            "format": "date-time",
            "type": "string"
          },
          "file_name": {
            "description": "File name.",
            "type": "string"
          },
          "file_path": {
            "description": "URL or path to the file.",
            "type": "string"
          },
          "file_size": {
            "description": "File size in bytes.",
            "format": "int64",
            "type": "integer"
          },
          "file_type": {
            "description": "MIME type of the file.",
            "type": "string"
          },
          "id": {
            "description": "Unique file ID.",
            "format": "uuid",
            "type": "string"
          },
          "issue_id": {
            "description": "Associated Issue ID.",
            "format": "uuid",
            "type": "string"
          },
          "project_id": {
            "description": "Associated Project ID.",
            "format": "uuid",
            "type": "string"
          },
          "uploaded_by": {
            "description": "User who uploaded the file.",
            "type": "string"
          },
          "url": {
            "description": "Presigned URL for accessing the uploaded file.",
            "format": "uri",
            "type": "string"
          }
        },
        "required": [
          "id",
          "issue_id",
          "project_id",
          "file_name",
          "file_path",
          "file_size",
          "file_type",
          "uploaded_by",
          "url",
          "created_at"
        ],
        "type": "object"
      },
      "GetIssueFilesResponse": {
        "additionalProperties": false,
        "description": "Paginated response schema for retrieving issue files.",
        "properties": {
          "data": {
            "description": "List of issue files.",
            "items": {
              "$ref": "#/components/schemas/IssueFileResponse"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        },
        "required": [
          "data",
          "meta"
        ],
        "title": "Get Issue Files Response",
        "type": "object"
      },
      "IssueActivityResponse": {
        "additionalProperties": false,
        "description": "Response schema for individual issue activity details.",
        "properties": {
          "action": {
            "description": "Action performed on the issue (e.g., create, update, delete).",
            "type": "string"
          },
          "column": {
            "description": "Column or field affected by the action.",
            "type": "string"
          },
          "created_at": {
            "description": "Timestamp of the activity.",
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "description": "Email of the user who performed the action.",
            "type": "string"
          },
          "entity": {
            "description": "Entity affected by the action.",
            "type": "string"
          },
          "id": {
            "description": "Unique activity ID.",
            "type": "string"
          },
          "issue_id": {
            "description": "Associated Issue ID.",
            "type": "string"
          },
          "new_value": {
            "description": "Updated value of the field.",
            "type": "string"
          },
          "old_value": {
            "description": "Previous value of the field.",
            "type": "string"
          },
          "project_id": {
            "description": "Associated Project ID.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "issue_id",
          "project_id",
          "email",
          "action",
          "entity",
          "column",
          "old_value",
          "new_value",
          "created_at"
        ],
        "type": "object"
      },
      "IssueAssigneeRequest": {
        "additionalProperties": false,
        "description": "Request schema for adding an assignee to an issue.",
        "properties": {
          "email": {
            "description": "Email of the assignee.",
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "IssueAssigneeResponse": {
        "additionalProperties": false,
        "description": "Response schema for issue assignee details.",
        "properties": {
          "createdAt": {
            "description": "Timestamp when the assignee was added.",
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "description": "Email of the assignee.",
            "type": "string"
          },
          "id": {
            "description": "Unique ID of the assignee.",
            "type": "string"
          },
          "issueId": {
            "description": "Issue ID associated with the assignee.",
            "type": "string"
          },
          "projectId": {
            "description": "Project ID associated with the assignee.",
            "type": "string"
          },
          "updatedAt": {
            "description": "Timestamp when the assignee was last updated.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "email",
          "projectId",
          "issueId",
          "createdAt"
        ],
        "type": "object"
      },
      "IssueFileResponse": {
        "additionalProperties": false,
        "description": "Response schema for individual issue file details.",
        "properties": {
          "createdAt": {
            "description": "Timestamp of upload.",
            "format": "date-time",
            "type": "string"
          },
          "fileName": {
            "description": "Original file name.",
            "type": "string"
          },
          "filePath": {
            "description": "Storage path for the file.",
            "type": "string"
          },
          "fileSize": {
            "description": "File size in bytes.",
            "type": "integer"
          },
          "fileType": {
            "description": "MIME type of the file.",
            "type": "string"
          },
          "id": {
            "description": "Unique file ID.",
            "type": "string"
          },
          "issueId": {
            "description": "Associated Issue ID.",
            "type": "string"
          },
          "projectId": {
            "description": "Associated Project ID.",
            "type": "string"
          },
          "uploadedBy": {
            "description": "Uploader's email.",
            "type": "string"
          },
          "url": {
            "description": "Publicly accessible URL.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "issueId",
          "projectId",
          "fileName",
          "filePath",
          "fileSize",
          "fileType",
          "uploadedBy",
          "url",
          "createdAt"
        ],
        "type": "object"
      },
      "IssueLinkResponse": {
        "additionalProperties": false,
        "description": "Response schema for issue link details.",
        "properties": {
          "createdAt": {
            "description": "Timestamp when the link was created.",
            "format": "date-time",
            "type": "string"
          },
          "createdBy": {
            "description": "User who created the link.",
            "type": "string"
          },
          "id": {
            "description": "Unique link ID.",
            "type": "string"
          },
          "issueId": {
            "description": "Associated Issue ID.",
            "type": "string"
          },
          "projectId": {
            "description": "Associated Project ID.",
            "type": "string"
          },
          "title": {
            "description": "Title of the link.",
            "type": "string"
          },
          "updatedAt": {
            "description": "Timestamp when the link was last updated.",
            "format": "date-time",
            "type": "string"
          },
          "updatedBy": {
            "description": "User who last updated the link.",
            "type": "string"
          },
          "url": {
            "description": "URL of the link.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "projectId",
          "title",
          "issueId",
          "url",
          "createdAt",
          "createdBy"
        ],
        "type": "object"
      },
      "IssueRequest": {
        "additionalProperties": false,
        "description": "Schema for creating a new issue.",
        "examples": [
          {
            "completed_percentage": 0,
            "description": "Implement login feature",
            "end_date": "2025-03-01",
            "estimated_hours": 40,
            "label_ids": [
              "111",
              "222"
            ],
            "priority": "High",
            "project_id": "123e4567-e89b-12d3-a456-426614174000",
            "start_date": "2025-02-10",
            "state_id": "234e5678-e89b-12d3-a456-426614174001",
            "title": "New Feature"
          }
        ],
        "properties": {
          "completed_percentage": {
            "description": "Percentage of completion.",
            "type": "integer"
          },
          "description": {
            "description": "Detailed description.",
            "type": "string"
          },
          "end_date": {
            "description": "End date.",
            "format": "date",
            "type": "string"
          },
          "estimated_hours": {
            "description": "Estimated hours to complete.",
            "type": "integer"
          },
          "label_ids": {
            "description": "List of label IDs.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "priority": {
            "description": "Priority level.",
            "type": "string"
          },
          "project_id": {
            "description": "Associated project ID.",
            "format": "uuid",
            "type": "string"
          },
          "start_date": {
            "description": "Start date.",
            "format": "date",
            "type": "string"
          },
          "state_id": {
            "description": "State ID.",
            "format": "uuid",
            "type": "string"
          },
          "title": {
            "description": "Title of the issue.",
            "type": "string"
          }
        },
        "required": [
          "title",
          "project_id",
          "state_id",
          "start_date",
          "end_date"
        ]
      },
      "IssueResponse": {
        "additionalProperties": false,
        "description": "Response schema for an issue.",
        "examples": [
          {
            "completed_percentage": 10,
            "created_at": "2025-02-10T14:32:00Z",
            "created_by": "user@example.com",
            "estimated_hours": 40,
            "id": "567e1234-e89b-12d3-a456-426614174002",
            "priority": "High",
            "project_id": "123e4567-e89b-12d3-a456-426614174000",
            "title": "New Feature",
            "updated_at": "2025-02-11T10:15:00Z"
          }
        ],
        "properties": {
          "completed_percentage": {
            "description": "Percentage completed.",
            "type": "integer"
          },
          "created_at": {
            "description": "Creation timestamp.",
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "description": "Creator's email.",
            "format": "email",
            "type": "string"
          },
          "estimated_hours": {
            "description": "Estimated hours.",
            "type": "integer"
          },
          "id": {
            "description": "Unique issue identifier.",
            "format": "uuid",
            "type": "string"
          },
          "priority": {
            "description": "Priority level.",
            "type": "string"
          },
          "project_id": {
            "description": "Associated project ID.",
            "format": "uuid",
            "type": "string"
          },
          "title": {
            "description": "Title of the issue.",
            "type": "string"
          },
          "updated_at": {
            "description": "Update timestamp.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "title",
          "project_id",
          "created_by",
          "created_at",
          "updated_at"
        ]
      },
      "ListIssueActivityResponse": {
        "additionalProperties": false,
        "description": "Paginated response schema for listing issue activities.",
        "properties": {
          "data": {
            "description": "List of issue activities.",
            "example": [
              {
                "action": "Updated",
                "column": "title",
                "created_at": "2025-02-07T09:45:00Z",
                "email": "user@example.com",
                "entity": "Title",
                "id": "9f1a2dbe-3bc5-45fb-97ed-8f6b33cdef12",
                "issue_id": "4d2e421e-784a-424e-ac0f-f9487e3ac95c",
                "new_value": "New Title",
                "old_value": "Old Title",
                "project_id": "a5c3d21e-4f5e-4827-b3b4-9d5c11fdfb45"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/IssueActivityResponse"
            },
            "type": "array"
          },
          "meta": {
            "description": "Pagination metadata.",
            "properties": {
              "limit": {
                "description": "Number of activities per page.",
                "example": 20,
                "type": "integer"
              },
              "page": {
                "description": "Current page number.",
                "example": 1,
                "type": "integer"
              },
              "total": {
                "description": "Total number of activities.",
                "example": 50,
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data",
          "meta"
        ],
        "title": "List Issue Activity Response",
        "type": "object"
      },
      "ListIssueAssigneeResponse": {
        "additionalProperties": false,
        "description": "Paginated response for listing issue assignees.",
        "properties": {
          "data": {
            "description": "List of issue assignees.",
            "items": {
              "$ref": "#/components/schemas/IssueAssigneeResponse"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        },
        "required": [
          "data",
          "meta"
        ],
        "type": "object"
      },
      "ListIssueLinksResponse": {
        "additionalProperties": false,
        "description": "Paginated response for listing issue links.",
        "properties": {
          "data": {
            "description": "List of issue links.",
            "items": {
              "$ref": "#/components/schemas/IssueLinkResponse"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        },
        "required": [
          "data",
          "meta"
        ],
        "type": "object"
      },
      "ListIssueTimeEntriesResponse": {
        "additionalProperties": false,
        "description": "Schema for listing time entries grouped by email with pagination metadata.",
        "examples": [
          {
            "data": {
              "user@example.com": [
                {
                  "created_at": "2025-02-13T10:00:00Z",
                  "created_by": "user@example.com",
                  "date": "2025-02-13",
                  "end_time": "17:00:00",
                  "hours": 8,
                  "id": "123e4567-e89b-12d3-a456-426614174000",
                  "is_timecard_generated": true,
                  "issue_id": "issue123",
                  "notes": "Daily work log",
                  "project_id": "project456",
                  "start_time": "09:00:00"
                }
              ]
            },
            "meta": {
              "limit": 10,
              "page": 1,
              "total": 20
            }
          }
        ],
        "properties": {
          "data": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/TimeEntryResponse"
              },
              "type": "array"
            },
            "description": "Time entries grouped by creator email.",
            "type": "object"
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        },
        "title": "ListIssueTimeEntriesResponse",
        "type": "object"
      },
      "ListIssuesResponse": {
        "additionalProperties": false,
        "description": "Paginated response schema for listing issues.",
        "properties": {
          "data": {
            "description": "List of issues.",
            "example": [
              {
                "created_at": "2025-02-05T14:32:00Z",
                "created_by": "admin@example.com",
                "description": "A test issue description.",
                "id": "4d2e421e-784a-424e-ac0f-f9487e3ac95c",
                "priority": "High",
                "project_id": "123e4567-e89b-12d3-a456-426614174000",
                "state": {
                  "id": "1",
                  "name": "Open"
                },
                "title": "Sample Issue",
                "updated_at": "2025-02-06T10:15:00Z"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/IssueResponse"
            },
            "type": "array"
          },
          "meta": {
            "description": "Pagination metadata.",
            "properties": {
              "limit": {
                "description": "Number of issues per page.",
                "example": 10,
                "type": "integer"
              },
              "page": {
                "description": "Current page number.",
                "example": 1,
                "type": "integer"
              },
              "total": {
                "description": "Total number of issues.",
                "example": 100,
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data",
          "meta"
        ],
        "title": "List Issues Response",
        "type": "object"
      },
      "ListTimeEntriesResponse": {
    "type": "object",
    "description": "Paginated response for listing time entries.",
    "additionalProperties": false,
    "properties": {
      "data": {
        "type": "array",
        "description": "List of time entries.",
        "items": {
          "$ref": "#/components/schemas/TimeEntryResponse"
        }
      },
      "meta": {
        "$ref": "#/components/schemas/Meta"
      }
    },
    "required": [
      "data",
      "meta"
    ]
  },
      "Meta": {
        "description": "Metadata information for paginated responses.",
        "example": {
          "limit": 10,
          "page": 1,
          "total": 9
        },
        "properties": {
          "limit": {
            "example": 10,
            "type": "integer"
          },
          "page": {
            "example": 1,
            "type": "integer"
          },
          "total": {
            "example": 9,
            "type": "integer"
          }
        },
        "title": "Meta",
        "type": "object"
      },
      "ProjectActivityResponse": {
        "description": "Represents an activity log entry for project changes.",
        "examples": [
          {
            "action": "updated",
            "column": "status",
            "created_at": "2024-02-12T15:04:05Z",
            "email": "user@example.com",
            "entity": "test_case",
            "id": "123e4567-e89b-12d3-a456-426614174000",
            "new_value": "Completed",
            "old_value": "In Progress",
            "project_id": "proj-456"
          },
          {
            "action": "updated",
            "column": "priority",
            "created_at": "2024-02-10T10:30:00Z",
            "email": "tester@example.com",
            "entity": "test_case",
            "id": "789e4567-e89b-12d3-a456-426614174001",
            "new_value": "High",
            "old_value": "Medium",
            "project_id": "proj-789"
          }
        ],
        "properties": {
          "action": {
            "description": "Type of action performed.",
            "example": "updated",
            "type": "string"
          },
          "column": {
            "description": "Database column or field that was changed.",
            "example": "status",
            "type": "string"
          },
          "created_at": {
            "description": "Timestamp of when the activity occurred.",
            "example": "2024-02-12T15:04:05Z",
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "description": "Email of the user performing the action.",
            "example": "user@example.com",
            "format": "email",
            "type": "string"
          },
          "entity": {
            "description": "Name of the entity affected by the action.",
            "example": "test_case",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the activity log.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "type": "string"
          },
          "new_value": {
            "description": "New value after the update.",
            "example": "Completed",
            "nullable": true,
            "type": "string"
          },
          "old_value": {
            "description": "Previous value before the update.",
            "example": "In Progress",
            "nullable": true,
            "type": "string"
          },
          "project_id": {
            "description": "Identifier of the associated project.",
            "example": "proj-456",
            "type": "string"
          }
        },
        "title": "Project Activity Response",
        "type": "object"
      },
      "ProjectFileResponse": {
        "description": "Response payload containing details of an uploaded project file.",
        "examples": [
          {
            "created_at": "2024-02-07T12:34:56Z",
            "file_name": "design_mockup.png",
            "file_size": 204800,
            "file_type": "png",
            "id": "123e4567-e89b-12d3-a456-426614174000",
            "project_id": "987e6543-e21b-45c3-b123-789456123000",
            "uploaded_by": "john.doe@example.com",
            "url": "https://cdn.example.com/uploads/projects/987e6543/design_mockup.png"
          }
        ],
        "properties": {
          "created_at": {
            "description": "Timestamp when the file was uploaded.",
            "example": "2024-02-07T12:34:56Z",
            "format": "date-time",
            "type": "string"
          },
          "file_name": {
            "description": "Name of the uploaded file.",
            "example": "design_mockup.png",
            "type": "string"
          },
          "file_size": {
            "description": "File size in bytes.",
            "example": 204800,
            "format": "int64",
            "type": "integer"
          },
          "file_type": {
            "description": "MIME type of the file.",
            "example": "image/png",
            "type": "string"
          },
          "id": {
            "description": "Unique file ID.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid",
            "type": "string"
          },
          "project_id": {
            "description": "Associated project ID.",
            "example": "987e6543-e21b-45c3-b123-789456123000",
            "format": "uuid",
            "type": "string"
          },
          "uploaded_by": {
            "description": "Email or identifier of the user who uploaded the file.",
            "example": "john.doe@example.com",
            "type": "string"
          },
          "url": {
            "description": "Public URL to access the file.",
            "example": "https://cdn.example.com/uploads/projects/987e6543/design_mockup.png",
            "format": "uri",
            "type": "string"
          }
        },
        "title": "Project File Response",
        "type": "object"
      },
      "ProjectLabelRequest": {
        "additionalProperties": false,
        "description": "Represents a request to create or update a project label.",
        "examples": [
          {
            "color": "#FF0000",
            "name": "High Priority"
          },
          {
            "color": "#FFA500",
            "name": "In Progress"
          },
          {
            "color": "#008000",
            "name": "Completed"
          }
        ],
        "properties": {
          "color": {
            "description": "Color associated with the label (in hex format).",
            "example": "#FF5733",
            "pattern": "^#([A-Fa-f0-9]{6})$",
            "type": "string"
          },
          "name": {
            "description": "Name of the label.",
            "example": "Urgent",
            "type": "string"
          }
        },
        "required": [
          "name",
          "color"
        ],
        "title": "Project Label Request",
        "type": "object"
      },
      "ProjectLabelResponse": {
        "additionalProperties": false,
        "description": "Represents a response containing details of a project label.",
        "examples": [
          {
            "color": "#FF0000",
            "created_at": "2025-02-07T10:15:30.123Z",
            "created_by": "john.doe@example.com",
            "id": "550e8400-e29b-41d4-a716-446655440000",
            "name": "High Priority",
            "project_id": "36c36dc4-3bd3-4c13-8712-16e130d60644",
            "updated_at": "2025-02-08T12:45:00.456Z"
          },
          {
            "color": "#FFA500",
            "created_at": "2025-02-07T11:30:45.789Z",
            "created_by": "jane.doe@example.com",
            "id": "2b5e8400-e29b-41d4-a716-446655440001",
            "name": "In Progress",
            "project_id": "6fcf5db2-1ed2-4c7a-92d5-dfa3e94a1a58",
            "updated_at": "2025-02-09T14:10:20.654Z"
          },
          {
            "color": "#008000",
            "created_at": "2025-02-06T08:20:15.321Z",
            "created_by": "admin@example.com",
            "id": "3a7e8400-e29b-41d4-a716-446655440002",
            "name": "Completed",
            "project_id": "92a99f17-cb47-4e65-8d9b-d64e82b6b934",
            "updated_at": "2025-02-08T09:45:30.987Z"
          }
        ],
        "properties": {
          "color": {
            "description": "Color associated with the label (in hex format).",
            "example": "#FF5733",
            "pattern": "^#([A-Fa-f0-9]{6})$",
            "type": "string"
          },
          "created_at": {
            "description": "Timestamp when the label was created.",
            "example": "2025-02-07T10:15:30.123Z",
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "description": "Email of the user who created the label.",
            "example": "john.doe@example.com",
            "format": "email",
            "type": "string"
          },
          "id": {
            "description": "Unique label ID.",
            "example": "550e8400-e29b-41d4-a716-446655440000",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Name of the label.",
            "example": "Urgent",
            "type": "string"
          },
          "project_id": {
            "description": "The unique ID of the associated project.",
            "example": "36c36dc4-3bd3-4c13-8712-16e130d60644",
            "format": "uuid",
            "type": "string"
          },
          "updated_at": {
            "description": "Timestamp when the label was last updated.",
            "example": "2025-02-08T12:45:00.456Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "color",
          "project_id",
          "created_at",
          "updated_at",
          "created_by"
        ],
        "title": "Project Label Response",
        "type": "object"
      },
      "ProjectMemberOperationsRequest": {
        "description": "Request payload for adding or updating project members and their roles.",
        "examples": [
          {
            "operations": [
              {
                "emails": [
                  "manager1@example.com",
                  "manager2@example.com"
                ],
                "operation": "add",
                "role": "Manager"
              },
              {
                "emails": [
                  "dev1@example.com",
                  "dev2@example.com"
                ],
                "operation": "remove",
                "role": "Contributor"
              }
            ]
          }
        ],
        "properties": {
          "operations": {
            "items": {
              "properties": {
                "emails": {
                  "example": [
                    "manager1@example.com",
                    "manager2@example.com"
                  ],
                  "items": {
                    "description": "List of email addresses to be added or removed.",
                    "format": "email",
                    "type": "string"
                  },
                  "type": "array"
                },
                "operation": {
                  "description": "Type of operation to perform.",
                  "enum": [
                    "add",
                    "remove"
                  ],
                  "example": "add",
                  "type": "string"
                },
                "role": {
                  "description": "The role of the members being added or removed.",
                  "enum": [
                    "Manager",
                    "Watcher",
                    "Contributor"
                  ],
                  "example": "Manager",
                  "type": "string"
                }
              },
              "required": [
                "operation",
                "role",
                "emails"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "operations"
        ],
        "title": "Project Member Operations Request",
        "type": "object"
      },
      "ProjectMemberRequest": {
        "additionalProperties": false,
        "description": "Request structure for adding a member to a project.",
        "examples": [
          {
            "email": "manager@example.com",
            "role": "Manager"
          },
          {
            "email": "watcher@example.com",
            "role": "Watcher"
          },
          {
            "email": "contributor@example.com",
            "role": "Contributor"
          }
        ],
        "properties": {
          "email": {
            "description": "Email address of the project member.",
            "example": "manager@example.com",
            "format": "email",
            "type": "string"
          },
          "role": {
            "description": "Role of the project member.",
            "enum": [
              "Manager",
              "Watcher",
              "Contributor"
            ],
            "example": "Manager",
            "type": "string"
          }
        },
        "required": [
          "email",
          "role"
        ],
        "title": "Project Memeber Request",
        "type": "object"
      },
      "ProjectMemberResponse": {
        "additionalProperties": false,
        "description": "Response structure for a project member.",
        "examples": [
          {
            "created_at": "2025-02-04T11:23:49.5502+05:30",
            "email": "manager@example.com",
            "id": "123e4567-e89b-12d3-a456-426614174000",
            "project_id": "0c873d73-4490-4598-a280-072792721d23",
            "role": "Manager",
            "updated_at": "2025-02-05T17:47:15.770839+05:30"
          },
          {
            "created_at": "2025-02-04T11:23:49.5502+05:30",
            "email": "watcher@example.com",
            "id": "223e4567-e89b-12d3-a456-426614174001",
            "project_id": "0c873d73-4490-4598-a280-072792721d23",
            "role": "Watcher",
            "updated_at": "2025-02-05T17:47:15.770839+05:30"
          },
          {
            "created_at": "2025-02-04T11:23:49.5502+05:30",
            "email": "contributor@example.com",
            "id": "323e4567-e89b-12d3-a456-426614174002",
            "project_id": "0c873d73-4490-4598-a280-072792721d23",
            "role": "Contributor",
            "updated_at": "2025-02-05T17:47:15.770839+05:30"
          }
        ],
        "properties": {
          "created_at": {
            "description": "Timestamp when the project member was added.",
            "example": "2025-02-04T11:23:49.5502+05:30",
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "description": "Email address of the project member.",
            "example": "manager@example.com",
            "format": "email",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the project member record.",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid",
            "type": "string"
          },
          "project_id": {
            "description": "Unique identifier of the associated project.",
            "example": "0c873d73-4490-4598-a280-072792721d23",
            "format": "uuid",
            "type": "string"
          },
          "role": {
            "description": "Role of the project member.",
            "enum": [
              "Manager",
              "Watcher",
              "Contributor"
            ],
            "example": "Manager",
            "type": "string"
          },
          "updated_at": {
            "description": "Timestamp when the project member details were last updated.",
            "example": "2025-02-05T17:47:15.770839+05:30",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "project_id",
          "email",
          "role",
          "created_at",
          "updated_at"
        ],
        "title": "Project Member Response",
        "type": "object"
      },
      "ProjectRequest": {
        "additionalProperties": false,
        "description": "Schema for creating or updating a project request.",
        "examples": [
          {
            "client_id": "4e35cc58-1d5d-4408-9d52-1b20e1b12523",
            "cover_url": "http://localhost:9000/0c873d73-4490-4598-a280-072792721d23/cover.jpe?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=1View%2F20250206%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20250206T045802Z\u0026X-Amz-Expires=10800\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=b690f890fa5709b1f8dee502073b1254c4987390f1fb279add9f7c632fb25c1b",
            "description": "A cloud platform project for enterprise-level clients.",
            "end_date": "2025-12-31",
            "name": "Project GreenLake",
            "slug": "GRENE",
            "start_date": "2025-01-01",
            "status": "Not Started",
            "tags": [
              "cloud",
              "enterprise",
              "platform"
            ]
          }
        ],
        "properties": {
          "client_id": {
            "description": "The unique identifier of the client.",
            "example": "4e35cc58-1d5d-4408-9d52-1b20e1b12523",
            "format": "uuid",
            "type": "string"
          },
          "cover_url": {
            "description": "URL to the project's cover image.",
            "example": "http://localhost:9000/0c873d73-4490-4598-a280-072792721d23/cover.jpg",
            "format": "uri",
            "type": "string"
          },
          "description": {
            "description": "A brief description of the project.",
            "example": "A cloud platform project for enterprise-level clients.",
            "minLength": 1,
            "type": "string"
          },
          "end_date": {
            "description": "The project end date (YYYY-MM-DD).",
            "example": "2025-12-31",
            "format": "date",
            "type": "string"
          },
          "name": {
            "description": "The name of the project.",
            "example": "Project GreenLake",
            "minLength": 1,
            "type": "string"
          },
          "slug": {
            "description": "A short identifier for the project, usually an acronym.",
            "example": "GRENE",
            "maxLength": 10,
            "minLength": 1,
            "pattern": "^[A-Z0-9]+$",
            "type": "string"
          },
          "start_date": {
            "description": "The project start date (YYYY-MM-DD).",
            "example": "2025-01-01",
            "format": "date",
            "type": "string"
          },
          "status": {
            "description": "The current status of the project.",
            "enum": [
              "Not Started",
              "In Progress",
              "Completed",
              "On Hold",
              "Cancelled"
            ],
            "example": "Not Started",
            "type": "string"
          },
          "tags": {
            "description": "A list of relevant tags for the project.",
            "example": [
              "cloud",
              "enterprise",
              "platform"
            ],
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "name",
          "slug",
          "description",
          "client_id",
          "start_date",
          "end_date",
          "status"
        ],
        "title": "Project Request",
        "type": "object"
      },
      "ProjectResponse": {
        "additionalProperties": false,
        "description": "Response structure for a project.",
        "examples": [
          {
            "client": {
              "country": "Japan",
              "created_at": "2025-01-17T13:35:41.123999+05:30",
              "created_by": "hv@hv.com",
              "id": "b3b2e687-9541-4282-863f-72a82b31be22",
              "manager_emails": [
                "hv@hv.com"
              ],
              "name": "HV",
              "updated_at": "2025-01-17T13:35:41.123999+05:30"
            },
            "cover_url": "http://localhost:9000/0c873d73-4490-4598-a280-072792721d23/cover.jpe?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=1View%2F20250206%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20250206T045802Z\u0026X-Amz-Expires=10800\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=b690f890fa5709b1f8dee502073b1254c4987390f1fb279add9f7c632fb25c1b",
            "created_at": "2025-02-04T11:23:49.5502+05:30",
            "created_by": "anirnay@redcloudcomputing.com",
            "description": "Project For Description",
            "end_date": "2025-02-27T05:30:00+05:30",
            "id": "0c873d73-4490-4598-a280-072792721d23",
            "name": "ProjectF",
            "slug": "PRDE",
            "start_date": "2025-02-05T05:30:00+05:30",
            "status": "On Hold",
            "tags": [
              "fda",
              "ffdsa",
              "weew"
            ],
            "updated_at": "2025-02-05T17:47:15.770839+05:30"
          }
        ],
        "properties": {
          "client": {
            "$ref": "#/components/schemas/ClientResponse"
          },
          "cover_url": {
            "description": "URL to the project's cover image.",
            "example": "http://localhost:9000/0c873d73-4490-4598-a280-072792721d23/cover.jpe?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=1View%2F20250206%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20250206T045802Z\u0026X-Amz-Expires=10800\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=b690f890fa5709b1f8dee502073b1254c4987390f1fb279add9f7c632fb25c1b",
            "format": "uri",
            "type": "string"
          },
          "created_at": {
            "description": "Timestamp when the project was created.",
            "example": "2025-02-04T11:23:49.5502+05:30",
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "description": "Email of the user who created the project.",
            "example": "anirnay@redcloudcomputing.com",
            "format": "email",
            "type": "string"
          },
          "description": {
            "description": "Description of the project.",
            "example": "Project For Description",
            "type": "string"
          },
          "end_date": {
            "description": "The end date of the project.",
            "example": "2025-02-27T05:30:00+05:30",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the project.",
            "example": "0c873d73-4490-4598-a280-072792721d23",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "The name of the project.",
            "example": "ProjectF",
            "type": "string"
          },
          "slug": {
            "description": "Short identifier for the project.",
            "example": "PRDE",
            "type": "string"
          },
          "start_date": {
            "description": "The start date of the project.",
            "example": "2025-02-05T05:30:00+05:30",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "The current status of the project.",
            "example": "On Hold",
            "type": "string"
          },
          "tags": {
            "description": "List of tags associated with the project.",
            "example": [
              "fda",
              "ffdsa",
              "weew"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "updated_at": {
            "description": "Timestamp when the project was last updated.",
            "example": "2025-02-05T17:47:15.770839+05:30",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "description",
          "client",
          "start_date",
          "end_date",
          "status",
          "tags",
          "created_at",
          "updated_at",
          "created_by"
        ],
        "title": "Project Response",
        "type": "object"
      },
      "ProjectStateRequest": {
        "additionalProperties": false,
        "description": "Represents a request to create or update a project state.",
        "examples": [
          {
            "name": "In Progress"
          },
          {
            "name": "Completed"
          },
          {
            "name": "On Hold"
          }
        ],
        "properties": {
          "name": {
            "description": "Name of the project state.",
            "example": "In Progress",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "title": "ProjectStateRequest",
        "type": "object"
      },
      "ProjectStateResponse": {
        "additionalProperties": false,
        "description": "Represents the response structure for a project state.",
        "examples": [
          {
            "created_at": "2025-02-07T12:30:45.123Z",
            "created_by": "admin@example.com",
            "id": "3f57b60c-5d4f-4b0b-bf10-2c9b9e2c7d4a",
            "name": "In Progress",
            "project_id": "ae12d34b-567c-89ef-01gh-234567890ijk",
            "sequence": 2,
            "updated_at": "2025-02-07T15:45:30.456Z"
          },
          {
            "created_at": "2025-02-05T08:15:00.789Z",
            "created_by": "manager@example.com",
            "id": "fa68c12d-34ef-4a78-91bc-5e2a67890abc",
            "name": "Completed",
            "project_id": "ae12d34b-567c-89ef-01gh-234567890ijk",
            "sequence": 3,
            "updated_at": "2025-02-06T10:00:25.456Z"
          }
        ],
        "properties": {
          "created_at": {
            "description": "Timestamp indicating when the state was created.",
            "example": "2025-02-07T12:30:45.123Z",
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "description": "Email of the user who created the state.",
            "example": "admin@example.com",
            "format": "email",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the project state.",
            "example": "3f57b60c-5d4f-4b0b-bf10-2c9b9e2c7d4a",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Name of the project state.",
            "example": "In Progress",
            "type": "string"
          },
          "project_id": {
            "description": "Unique identifier of the associated project.",
            "example": "ae12d34b-567c-89ef-01gh-234567890ijk",
            "format": "uuid",
            "type": "string"
          },
          "sequence": {
            "description": "Order or sequence number of the state.",
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "updated_at": {
            "description": "Timestamp indicating when the state was last updated.",
            "example": "2025-02-07T15:45:30.456Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "created_by",
          "project_id",
          "sequence",
          "created_at",
          "updated_at"
        ],
        "title": "Project State Response",
        "type": "object"
      },
      "TimeEntryRequest": {
        "additionalProperties": false,
        "description": "Schema for creating or updating a time entry.",
        "examples": [
          {
            "date": "2025-02-13",
            "end_time": "17:00:00",
            "notes": "Worked on feature X",
            "start_time": "09:00:00"
          }
        ],
        "properties": {
          "date": {
            "description": "The date for the time entry.",
            "format": "date",
            "type": "string"
          },
          "end_time": {
            "description": "The end time for the work done.",
            "format": "time",
            "type": "string"
          },
          "notes": {
            "description": "Additional notes for the time entry.",
            "type": "string"
          },
          "start_time": {
            "description": "The start time for the work done.",
            "format": "time",
            "type": "string"
          }
        },
        "required": [
          "date",
          "start_time",
          "end_time"
        ],
        "title": "TimeEntryRequest",
        "type": "object"
      },
      "TimeEntryResponse": {
        "additionalProperties": false,
        "description": "Response schema for a time entry.",
        "examples": [
          {
            "created_at": "2025-02-13T10:00:00Z",
            "created_by": "user@example.com",
            "date": "2025-02-13",
            "end_time": "2025-02-13T17:00:00Z",
            "hours": 8,
            "id": "123e4567-e89b-12d3-a456-426614174000",
            "is_timecard_generated": true,
            "issue_id": "issue789",
            "notes": "Daily work log",
            "project_id": "abc123",
            "start_time": "2025-02-13T09:00:00Z",
            "updated_at": "2025-02-13T18:00:00Z"
          }
        ],
        "properties": {
          "created_at": {
            "description": "When the time entry was created.",
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "description": "The user who created the time entry.",
            "format": "email",
            "type": "string"
          },
          "date": {
            "description": "The date of the time entry.",
            "format": "date",
            "type": "string"
          },
          "end_time": {
            "description": "The end time of the work done.",
            "format": "date-time",
            "type": "string"
          },
          "hours": {
            "description": "The number of hours worked.",
            "type": "number"
          },
          "id": {
            "description": "Unique identifier for the time entry.",
            "format": "uuid",
            "type": "string"
          },
          "is_timecard_generated": {
            "description": "Indicates if a time card has been generated.",
            "type": "boolean"
          },
          "issue_id": {
            "description": "The issue ID the entry belongs to.",
            "type": "string"
          },
          "notes": {
            "description": "Notes about the time entry.",
            "type": "string"
          },
          "project_id": {
            "description": "The project ID for the time entry.",
            "type": "string"
          },
          "start_time": {
            "description": "The start time of the work done.",
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "description": "When the time entry was last updated.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "project_id",
          "issue_id",
          "created_by",
          "date",
          "start_time",
          "end_time",
          "hours",
          "created_at",
          "updated_at"
        ],
        "title": "TimeEntryResponse",
        "type": "object"
      },

      "UpdateStatesSequenceRequest": {
        "Description": "Request payload for updating the sequence of project states in a predefined order.",
        "examples": [
          {
            "state_sequence": [
              "550e8400-e29b-41d4-a716-446655440000",
              "550e8400-e29b-41d4-a716-446655440001",
              "550e8400-e29b-41d4-a716-446655440002"
            ]
          }
        ],
        "properties": {
          "state_sequence": {
            "description": "Ordered list of state UUIDs representing the desired sequence.",
            "items": {
              "description": "Unique identifier of a state.",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "state_sequence"
        ],
        "title": "Update States Sequence Request",
        "type": "object"
      },
      "UploadIssueFilesResponse": {
        "additionalProperties": false,
        "description": "Response schema for uploading multiple issue files.",
        "properties": {
          "data": {
            "description": "List of uploaded files.",
            "items": {
              "$ref": "#/components/schemas/IssueFileResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "title": "Upload Issue Files Response",
        "type": "object"
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "bearerFormat": "JWT",
        "description": "JWT Token",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "contact": {
      "email": "support@projectmanagement.com",
      "name": "Project Management API Team",
      "url": "http://projectmanagement.com"
    },
    "description": "API for managing clients, projects, and issues to demonstrate the features of OpenAPI 3.1 specification.",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "termsOfService": "http://example.com/terms/",
    "title": "Project Management API",
    "version": "1.0.0"
  },
  "openapi": "3.1.0",
  "paths": {
    "/client": {
      "post": {
        "description": "Create a new client with the provided details.",
        "operationId": "createClient",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientRequest"
              }
            }
          },
          "description": "Client data to create a new client.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "$ref": "#/components/examples/ClientResponse"
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ClientResponse"
                    },
                    "message": {
                      "example": "Clients retrieved successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully created client"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid input"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Conflict"
                }
              }
            },
            "description": "Conflict"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/UnprocessableEntity"
                }
              }
            },
            "description": "UnprocessableEntity"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Create a new client",
        "tags": [
          "Client"
        ]
      }
    },
    "/client/{client_id}": {
      "delete": {
        "description": "Delete the client with the provided client ID.",
        "operationId": "deleteClient",
        "parameters": [
          {
            "description": "The unique ID of the client to be deleted.",
            "in": "path",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Client deleted successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully deleted client"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid client ID"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Client not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Delete a client by ID",
        "tags": [
          "Client"
        ]
      },
      "get": {
        "description": "Retrieve the details of a client by the provided client ID.",
        "operationId": "getClientById",
        "parameters": [
          {
            "description": "The unique ID of the client.",
            "in": "path",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "$ref": "#/components/examples/ClientResponse"
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ClientResponse"
                    },
                    "message": {
                      "example": "Client retrieved successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully retrieved client"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid client ID"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Client not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Retrieve a client by ID",
        "tags": [
          "Client"
        ]
      },
      "put": {
        "description": "Update the details of a client with the provided client ID.",
        "operationId": "updateClient",
        "parameters": [
          {
            "description": "The unique ID of the client to be updated.",
            "in": "path",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientRequest"
              }
            }
          },
          "description": "Client data to update the existing client.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "$ref": "#/components/examples/ClientResponse"
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ClientResponse"
                    },
                    "message": {
                      "example": "Client updated successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully updated client"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid input"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Client not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Update an existing client by ID",
        "tags": [
          "Client"
        ]
      }
    },
    "/clients": {
      "get": {
        "description": "Retrieve a paginated list of clients.",
        "operationId": "listClients",
        "parameters": [
          {
            "description": "The page number for pagination.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "type": "integer"
            }
          },
          {
            "description": "The number of items per page.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 10,
              "example": 20,
              "type": "integer"
            }
          },
          {
            "description": "The name of the client.",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "example": "Acme Corp",
              "type": "string"
            }
          },
          {
            "description": "The emails of the managers.",
            "in": "query",
            "name": "manager_emails",
            "required": false,
            "schema": {
              "example": [
                "manager1@example.com",
                "manager2@example.com"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "The name of the country.",
            "in": "query",
            "name": "country",
            "required": false,
            "schema": {
              "example": "United States",
              "type": "string"
            }
          },
          {
            "description": "Field to sort results by (e.g., name, country).",
            "in": "query",
            "name": "sort_by",
            "required": false,
            "schema": {
              "enum": [
                "name",
                "country"
              ],
              "example": "name",
              "type": "string"
            }
          },
          {
            "description": "Sort order (asc for ascending, desc for descending).",
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "default": "asc",
              "enum": [
                "asc",
                "desc"
              ],
              "example": "desc",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "$ref": "#/components/examples/ClientsListResponse"
                },
                "schema": {
                  "properties": {
                    "data": {
                      "examples": [
                        {
                          "country": "Japan",
                          "created_at": "2025-02-05T14:32:00Z",
                          "created_by": "admin@redcloudcomputing.com",
                          "data": null,
                          "id": "4d2e421e-784a-424e-ac0f-f9487e3ac95c",
                          "manager_emails": [
                            "vbhadauriya@redcloudcomputing.com"
                          ],
                          "name": "RCC-NEww",
                          "updated_at": "2025-02-05T14:32:00Z"
                        }
                      ],
                      "items": {
                        "$ref": "#/components/schemas/ClientResponse"
                      },
                      "type": "array"
                    },
                    "message": {
                      "example": "Clients retrieved successfully.",
                      "type": "string"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully retrieved clients"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid input"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "NotFound"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "List all clients with pagination",
        "tags": [
          "Client"
        ]
      }
    },
    "/healthz": {
      "get": {
        "description": "Check the health status of the API service.",
        "operationId": "getHealthStatus",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Service is running",
                      "type": "string"
                    },
                    "status": {
                      "example": "ok",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Service is running and healthy."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Healthz route not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "security": [],
        "summary": "Health Check",
        "tags": [
          "HealthCheck"
        ]
      }
    },
    "/project": {
      "post": {
        "description": "Create a new project with the provided details.",
        "operationId": "createProject",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRequest"
              }
            }
          },
          "description": "Project data to create a new project.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProjectResponse"
                    },
                    "message": {
                      "example": "Project created successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully created project"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid input"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Conflict"
                }
              }
            },
            "description": "Conflict"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/UnprocessableEntity"
                }
              }
            },
            "description": "UnprocessableEntity"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Create a new project",
        "tags": [
          "Project"
        ]
      }
    },
    "/project/{project_id}": {
      "delete": {
        "description": "Delete the project with the provided project ID.",
        "operationId": "deleteProject",
        "parameters": [
          {
            "description": "The unique ID of the project to be deleted.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Project deleted successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully deleted project"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid project ID"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Delete a project by ID",
        "tags": [
          "Project"
        ]
      },
      "get": {
        "description": "Retrieve the details of a project by the provided project ID.",
        "operationId": "getProjectById",
        "parameters": [
          {
            "description": "The unique ID of the project.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProjectResponse"
                    },
                    "message": {
                      "example": "Project retrieved successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully retrieved project"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid project ID"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Retrieve a project by ID",
        "tags": [
          "Project"
        ]
      },
      "put": {
        "description": "Update the details of a project with the provided project ID.",
        "operationId": "updateProject",
        "parameters": [
          {
            "description": "The unique ID of the project to be updated.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRequest"
              }
            }
          },
          "description": "Project data to update the existing project.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProjectResponse"
                    },
                    "message": {
                      "example": "Project updated successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully updated project"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid input"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Update an existing project by ID",
        "tags": [
          "Project"
        ]
      }
    },
    "/project/{project_id}/activities": {
      "get": {
        "description": "Fetch a list of project activities, including changes to entities within a project.",
        "operationId": "listProjectActivities",
        "parameters": [
          {
            "description": "Unique identifier of the project.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The page number for pagination.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "type": "integer"
            }
          },
          {
            "description": "The number of items per page.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 10,
              "type": "integer"
            }
          },
          {
            "description": "Filter by action type (e.g., create, update, delete).",
            "in": "query",
            "name": "action",
            "required": false,
            "schema": {
              "example": "update",
              "type": "string"
            }
          },
          {
            "description": "Filter by the entity type (e.g., task, label).",
            "in": "query",
            "name": "entity",
            "required": false,
            "schema": {
              "example": "task",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ProjectActivityResponse"
                      },
                      "type": "array"
                    },
                    "message": {
                      "example": "Project activities retrieved successfully.",
                      "type": "string"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully retrieved project activities."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid input."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project or activities not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Retrieve a paginated list of activities for a specific project.",
        "tags": [
          "ProjectActivity"
        ]
      }
    },
    "/project/{project_id}/cover": {
      "post": {
        "description": "Upload a cover image to the specified project.",
        "operationId": "uploadProjectCover",
        "parameters": [
          {
            "description": "Unique identifier of the project.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "image": {
                    "description": "The cover image file to be uploaded.",
                    "format": "binary",
                    "type": "string"
                  }
                },
                "required": [
                  "image"
                ],
                "type": "object"
              }
            }
          },
          "description": "The request body for uploading a cover image file, requiring a binary file in multipart/form-data format.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ProjectFileResponse"
                      },
                      "type": "array"
                    },
                    "message": {
                      "example": "Cover image uploaded successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Cover image uploaded successfully."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid project ID or file format."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Upload a cover image for a project",
        "tags": [
          "Project"
        ]
      }
    },
    "/project/{project_id}/file/{file_id}": {
      "delete": {
        "description": "Remove a specific file from the specified project.",
        "operationId": "deleteProjectFile",
        "parameters": [
          {
            "description": "Unique identifier of the project.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the file to be deleted.",
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "File deleted successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully deleted the file."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid project ID or file ID."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project or file not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Delete a project file",
        "tags": [
          "ProjectFiles"
        ]
      }
    },
    "/project/{project_id}/files": {
      "get": {
        "description": "Fetch a list of files uploaded to the specified project.",
        "operationId": "listProjectFiles",
        "parameters": [
          {
            "description": "Unique identifier of the project.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ProjectFileResponse"
                      },
                      "type": "array"
                    },
                    "message": {
                      "example": "Project files retrieved successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully retrieved project files."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid project ID."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project or files not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Retrieve a list of project files",
        "tags": [
          "ProjectFiles"
        ]
      },
      "post": {
        "description": "Upload one or more files to the specified project.",
        "operationId": "uploadProjectFiles",
        "parameters": [
          {
            "description": "Unique identifier of the project.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FileUploadRequest"
              }
            }
          },
          "description": "The request body for uploading a file, using multipart/form-data to include file metadata and contents.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ProjectFileResponse"
                      },
                      "type": "array"
                    },
                    "message": {
                      "example": "Files uploaded successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Files uploaded successfully."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid project ID or file format."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Upload multiple files to a project",
        "tags": [
          "ProjectFiles"
        ]
      }
    },
    "/project/{project_id}/issue": {
      "post": {
        "description": "This endpoint creates a new issue with the provided title, description, status, tags, and associated user ID.",
        "operationId": "createIssue",
        "parameters": [
          {
            "description": "ID of the project to create the issue in",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "Detailed description of the issue",
                    "type": "string"
                  },
                  "status": {
                    "description": "Current status of the issue",
                    "type": "string"
                  },
                  "tags": {
                    "description": "List of tags associated with the issue",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "title": {
                    "description": "Title of the issue",
                    "type": "string"
                  },
                  "userId": {
                    "description": "ID of the user who created the issue",
                    "type": "integer"
                  }
                },
                "required": [
                  "title",
                  "description",
                  "status",
                  "userId"
                ],
                "type": "object"
              }
            }
          },
          "description": "JSON object containing issue details",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "description": {
                      "description": "Description of the created issue",
                      "type": "string"
                    },
                    "id": {
                      "description": "Unique identifier for the issue",
                      "type": "integer"
                    },
                    "status": {
                      "description": "Status of the created issue",
                      "type": "string"
                    },
                    "tags": {
                      "description": "Tags of the created issue",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "title": {
                      "description": "Title of the created issue",
                      "type": "string"
                    },
                    "userId": {
                      "description": "ID of the user who created the issue",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Issue created successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid client ID"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Create a new issue",
        "tags": [
          "Issues"
        ]
      }
    },
    "/project/{project_id}/issue/{issue_id}/activities": {
      "get": {
        "description": "Retrieve a list of activities for a specific issue within a project, with pagination support.",
        "operationId": "ListIssueActivitiesByID",
        "parameters": [
          {
            "description": "ID of the project to list activities from",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the issue to retrieve activities for",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page number for pagination",
            "in": "query",
            "name": "page",
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Number of activities per page",
            "in": "query",
            "name": "page_size",
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListIssueActivityResponse"
                }
              }
            },
            "description": "List of issue activities retrieved successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Invalid pagination parameters"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized to access this project or issue"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project or issue not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "List activities of an issue in a project",
        "tags": [
          "Issues"
        ]
      }
    },
    "/project/{project_id}/issue/{issue_id}/assignee": {
      "post": {
        "description": "Assign a user to an issue within a project.",
        "operationId": "AddIssueAssignee",
        "parameters": [
          {
            "description": "ID of the project",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueAssigneeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueAssigneeResponse"
                }
              }
            },
            "description": "Assignee added successfully."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Invalid request parameters."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project or issue not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Conflict"
                }
              }
            },
            "description": "Assignee already exists."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Assign an issue to a user",
        "tags": [
          "Issue Assignee"
        ]
      }
    },
    "/project/{project_id}/issue/{issue_id}/assignee/{assignee_id}": {
      "delete": {
        "description": "Remove an assignee from an issue.",
        "operationId": "RemoveIssueAssignee",
        "parameters": [
          {
            "description": "ID of the project",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the assignee",
            "in": "path",
            "name": "assignee_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignee removed successfully."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Invalid request parameters."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project, issue, or assignee not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Remove an assignee from an issue",
        "tags": [
          "Issue Assignee"
        ]
      }
    },
    "/project/{project_id}/issue/{issue_id}/assignees": {
      "get": {
        "description": "Retrieve a list of assignees for a specific issue.",
        "operationId": "ListIssueAssignees",
        "parameters": [
          {
            "description": "ID of the project",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page number for pagination",
            "in": "query",
            "name": "page",
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Number of assignees per page",
            "in": "query",
            "name": "page_size",
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListIssueAssigneeResponse"
                }
              }
            },
            "description": "List of issue assignees retrieved successfully."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Invalid request parameters."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project or issue not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "List assignees of an issue",
        "tags": [
          "Issue Assignee"
        ]
      }
    },
    "/project/{project_id}/issues": {
      "get": {
        "description": "Retrieve all issues within a specific project, with optional filtering by title, description, priority, points, and date ranges. Supports pagination.",
        "operationId": "ListIssues",
        "parameters": [
          {
            "description": "ID of the project to list issues from",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by issue title",
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by issue description",
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by issue priority",
            "in": "query",
            "name": "priority",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by start date (YYYY-MM-DD)",
            "in": "query",
            "name": "start_date",
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Filter by end date (YYYY-MM-DD)",
            "in": "query",
            "name": "end_date",
            "schema": {
              "format": "date",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListIssuesResponse"
                }
              }
            },
            "description": "List of issues retrieved successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid input."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project or labels not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "List all issues in a project",
        "tags": [
          "Issues"
        ]
      }
    },
    "/project/{project_id}/issues/{issue_id}": {
      "delete": {
        "description": "Delete a specific issue by its unique ID within a project.",
        "operationId": "DeleteIssue",
        "parameters": [
          {
            "description": "ID of the project",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Issue deleted successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid input."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project or labels not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Delete an issue by ID",
        "tags": [
          "Issues"
        ]
      },
      "get": {
        "description": "Retrieve a specific issue by its unique ID within a project.",
        "operationId": "GetIssue",
        "parameters": [
          {
            "description": "ID of the project",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueResponse"
                }
              }
            },
            "description": "Issue retrieved successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid input."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project or labels not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Get issue by ID",
        "tags": [
          "Issues"
        ]
      }
    },
    "/project/{project_id}/issues/{issue_id}/files": {
      "post": {
        "description": "Upload a file to a specific issue within a project.",
        "operationId": "UploadIssueFile",
        "parameters": [
          {
            "description": "ID of the project",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "required": [
                  "file"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileUploadResponse"
                }
              }
            },
            "description": "File uploaded successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid input."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project or issue not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Upload a file to an issue",
        "tags": [
          "Issue Files"
        ]
      }
    },
    "/project/{project_id}/issues/{issue_id}/files/{file_id}": {
      "delete": {
        "description": "Delete a specific file from an issue.",
        "operationId": "DeleteIssueFile",
        "parameters": [
          {
            "description": "ID of the project",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the file",
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "File deleted successfully"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "File not found."
          }
        },
        "summary": "Delete a file from an issue",
        "tags": [
          "Issue Files"
        ]
      },
      "get": {
        "description": "Retrieve a specific file associated with an issue.",
        "operationId": "GetIssueFile",
        "parameters": [
          {
            "description": "ID of the project",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the file",
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {}
            },
            "description": "File retrieved successfully"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "File not found."
          }
        },
        "summary": "Retrieve a file from an issue",
        "tags": [
          "Issue Files"
        ]
      }
    },
    "/project/{project_id}/issue/{issue_id}/time-entry": {
    "post": {
      "description": "Create a time entry for a specific issue within a project.",
      "operationId": "CreateIssueTimeEntry",
      "parameters": [
        {
          "description": "ID of the project",
          "in": "path",
          "name": "project_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "ID of the issue",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TimeEntryRequest"
            }
          }
        }
      },
      "responses": {
        "201": {
          "description": "Time entry created successfully.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeEntryResponse"
              }
            }
          }
        },
        "400": {
          "description": "Invalid request parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/responses/BadRequest"
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/responses/Unauthorized"
              }
            }
          }
        },
        "404": {
          "description": "Project or issue not found.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/responses/NotFound"
              }
            }
          }
        },
        "500": {
          "description": "Internal server error.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/responses/InternalServerError"
              }
            }
          }
        }
      },
      "summary": "Create a time entry for an issue",
      "tags": ["Issue Time Entry"]
    }
  },
  "/project/{project_id}/issue/{issue_id}/time-entries": {
    "get": {
      "description": "Retrieve a list of time entries for a specific issue.",
      "operationId": "ListIssueTimeEntries",
      "parameters": [
        {
          "description": "ID of the project",
          "in": "path",
          "name": "project_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "ID of the issue",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "Page number for pagination",
          "in": "query",
          "name": "page",
          "schema": {
            "minimum": 1,
            "type": "integer"
          }
        },
        {
          "description": "Number of time entries per page",
          "in": "query",
          "name": "page_size",
          "schema": {
            "minimum": 1,
            "type": "integer"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "List of time entries retrieved successfully.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListTimeEntriesResponse"
              }
            }
          }
        },
        "400": {
          "description": "Invalid request parameters."
        },
        "401": {
          "description": "Unauthorized request."
        },
        "404": {
          "description": "Project or issue not found."
        },
        "500": {
          "description": "Internal server error."
        }
      },
      "summary": "List time entries for an issue",
      "tags": ["Issue Time Entry"]
    }
  },
  "/project/{project_id}/issue/{issue_id}/time-entry/{te_id}": {
    "get": {
      "description": "Retrieve a specific time entry for an issue.",
      "operationId": "GetIssueTimeEntryByID",
      "parameters": [
        {
          "description": "ID of the project",
          "in": "path",
          "name": "project_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "ID of the issue",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "ID of the time entry",
          "in": "path",
          "name": "te_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Time entry retrieved successfully."
        },
        "404": {
          "description": "Time entry not found."
        }
      },
      "summary": "Get a specific time entry for an issue",
      "tags": ["Issue Time Entry"]
    },
    "put": {
      "description": "Update a specific time entry for an issue.",
      "operationId": "UpdateIssueTimeEntryByID",
      "parameters": [
        {
          "description": "ID of the project",
          "in": "path",
          "name": "project_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "ID of the issue",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "ID of the time entry",
          "in": "path",
          "name": "te_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TimeEntryRequest"
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Time entry updated successfully."
        },
        "404": {
          "description": "Time entry not found."
        }
      },
      "summary": "Update a specific time entry for an issue",
      "tags": ["Issue Time Entry"]
    },
    "delete": {
      "description": "Delete a specific time entry for an issue.",
      "operationId": "DeleteIssueTimeEntry",
      "parameters": [
        {
          "description": "ID of the project",
          "in": "path",
          "name": "project_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "ID of the issue",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "ID of the time entry",
          "in": "path",
          "name": "te_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Time entry deleted successfully."
        },
        "404": {
          "description": "Time entry not found."
        }
      },
      "summary": "Delete a specific time entry for an issue",
      "tags": ["Issue Time Entry"]
    }
  },


    "/project/{project_id}/label": {
      "post": {
        "description": "Create a new label for a specific project.",
        "operationId": "createProjectLabel",
        "parameters": [
          {
            "description": "Unique identifier of the project.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectLabelRequest"
              }
            }
          },
          "description": "Label data to create a new project label.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProjectLabelResponse"
                    },
                    "message": {
                      "example": "Project label created successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully created project label."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid input."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Conflict"
                }
              }
            },
            "description": "Conflict due to an existing project label with the same identifier."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/UnprocessableEntity"
                }
              }
            },
            "description": "Unprocessable entity due to validation errors."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Create a new project label",
        "tags": [
          "ProjectLabel"
        ]
      }
    },
    "/project/{project_id}/label/{label_id}": {
      "delete": {
        "description": "Delete the project label with the provided project and label ID.",
        "operationId": "deleteProjectLabel",
        "parameters": [
          {
            "description": "Unique identifier of the project.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the project label.",
            "in": "path",
            "name": "label_id",
            "required": true,
            "schema": {
              "example": "456e7890-e89b-12d3-a456-426614174111",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Project label deleted successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully deleted project label."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid project or label ID."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project or label not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Delete a project label by ID",
        "tags": [
          "ProjectLabel"
        ]
      },
      "get": {
        "description": "Retrieve the details of a project label by the provided project and label ID.",
        "operationId": "getProjectLabelById",
        "parameters": [
          {
            "description": "Unique identifier of the project.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the project label.",
            "in": "path",
            "name": "label_id",
            "required": true,
            "schema": {
              "example": "456e7890-e89b-12d3-a456-426614174111",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProjectLabelResponse"
                    },
                    "message": {
                      "example": "Project label retrieved successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully retrieved project label."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid project or label ID."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project or label not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Retrieve a project label by ID",
        "tags": [
          "ProjectLabel"
        ]
      },
      "put": {
        "description": "Update the details of a project label with the provided project and label ID.",
        "operationId": "updateProjectLabel",
        "parameters": [
          {
            "description": "Unique identifier of the project.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the project label.",
            "in": "path",
            "name": "label_id",
            "required": true,
            "schema": {
              "example": "456e7890-e89b-12d3-a456-426614174111",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectLabelRequest"
              }
            }
          },
          "description": "Project label data to update the existing label.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProjectLabelResponse"
                    },
                    "message": {
                      "example": "Project label updated successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully updated project label."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid input."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project or label not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Update an existing project label by ID",
        "tags": [
          "ProjectLabel"
        ]
      }
    },
    "/project/{project_id}/labels": {
      "get": {
        "description": "Retrieve a paginated list of labels for a specific project.",
        "operationId": "listProjectLabels",
        "parameters": [
          {
            "description": "Unique identifier of the project.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The page number for pagination.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "type": "integer"
            }
          },
          {
            "description": "The number of items per page.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 10,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ProjectLabelResponse"
                      },
                      "type": "array"
                    },
                    "message": {
                      "example": "Project labels retrieved successfully.",
                      "type": "string"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully retrieved project labels."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid input."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project or labels not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "List all project labels with pagination",
        "tags": [
          "ProjectLabel"
        ]
      }
    },
    "/project/{project_id}/member": {
      "post": {
        "description": "Add a new member to a specific project using their details.",
        "operationId": "addProjectMember",
        "parameters": [
          {
            "description": "Unique identifier of the project.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectMemberRequest"
              }
            }
          },
          "description": "Project member details.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProjectMemberResponse"
                    },
                    "message": {
                      "example": "Project member added successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully added the project member."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid input."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Add a new project member",
        "tags": [
          "ProjectMember"
        ]
      }
    },
    "/project/{project_id}/member/email/{email}": {
      "delete": {
        "description": "Delete a project member using their email within a specific project.",
        "operationId": "deleteProjectMemberByEmail",
        "parameters": [
          {
            "description": "Unique identifier of the project.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Email of the project member.",
            "in": "path",
            "name": "email",
            "required": true,
            "schema": {
              "example": "user@example.com",
              "format": "email",
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Project member removed successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully removed the project member."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid project ID or email."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project or member not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Remove a project member by email",
        "tags": [
          "ProjectMember"
        ]
      },
      "get": {
        "description": "Fetch project member details using their email within a specific project.",
        "operationId": "getProjectMemberByEmail",
        "parameters": [
          {
            "description": "Unique identifier of the project.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Email of the project member.",
            "in": "path",
            "name": "email",
            "required": true,
            "schema": {
              "example": "user@example.com",
              "format": "email",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ProjectMemberResponse"
                      },
                      "type": "array"
                    },
                    "message": {
                      "example": "Project member retrieved successfully.",
                      "type": "string"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully retrieved project member details."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid project ID or email."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project or member not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Retrieve a project member by email",
        "tags": [
          "ProjectMember"
        ]
      }
    },
    "/project/{project_id}/member/id/{member_id}": {
      "delete": {
        "description": "Delete a project member using their unique member ID within a specific project.",
        "operationId": "deleteProjectMemberById",
        "parameters": [
          {
            "description": "Unique identifier of the project.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the project member.",
            "in": "path",
            "name": "member_id",
            "required": true,
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Project member removed successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully removed the project member."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid project ID or member ID."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project or member not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Remove a project member by ID",
        "tags": [
          "ProjectMember"
        ]
      },
      "get": {
        "description": "Fetch project member details using their Id within a specific project.",
        "operationId": "getProjectMemberByID",
        "parameters": [
          {
            "description": "Unique identifier of the project.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Member id of the project member.",
            "in": "path",
            "name": "member_id",
            "required": true,
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ProjectMemberResponse"
                      },
                      "type": "array"
                    },
                    "message": {
                      "example": "Project member retrieved successfully.",
                      "type": "string"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully retrieved project member details."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid project ID or email."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project or member not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Retrieve a project member by ID",
        "tags": [
          "ProjectMember"
        ]
      }
    },
    "/project/{project_id}/members": {
      "get": {
        "description": "Fetch a paginated list of members associated with a specific project.",
        "operationId": "listProjectMembers",
        "parameters": [
          {
            "description": "Unique identifier of the project.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "description": "A valid project UUID.",
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The page number for pagination.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "type": "integer"
            }
          },
          {
            "description": "The number of items per page.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 10,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ProjectMemberResponse"
                      },
                      "type": "array"
                    },
                    "message": {
                      "example": "Project members retrieved successfully.",
                      "type": "string"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully retrieved project members."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid project ID."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project or members not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Retrieve a list of project members",
        "tags": [
          "ProjectMember"
        ]
      }
    },
    "/project/{project_id}/members/operation": {
      "post": {
        "description": "Execute operations such as adding, removing, or updating multiple members within a specific project.",
        "operationId": "performMemberOperation",
        "parameters": [
          {
            "description": "Unique identifier of the project.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectMemberOperationsRequest"
              }
            }
          },
          "description": "Operation details for project members.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Operation executed successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully performed the operation on project members."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid input."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project or members not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Perform an operation on project members",
        "tags": [
          "ProjectMember"
        ]
      }
    },
    "/project/{project_id}/state": {
      "post": {
        "description": "Create a new state for a specific project.",
        "operationId": "createProjectState",
        "parameters": [
          {
            "description": "Unique identifier of the project.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectStateRequest"
              }
            }
          },
          "description": "State data to create a new project state.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProjectStateResponse"
                    },
                    "message": {
                      "example": "Project state created successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully created project state."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid input."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Conflict"
                }
              }
            },
            "description": "Conflict due to an existing project state with the same identifier."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/UnprocessableEntity"
                }
              }
            },
            "description": "Unprocessable entity due to validation errors."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Create a new project state",
        "tags": [
          "ProjectState"
        ]
      },
      "put": {
        "description": "Update the sequence of states by providing an ordered list of state UUIDs.",
        "operationId": "updateStateSequence",
        "parameters": [
          {
            "description": "Unique identifier of the project.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStatesSequenceRequest"
              }
            }
          },
          "description": "The request body containing the updated sequence of project states, ensuring they are reordered according to the specified structure.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "State sequence updated successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully updated the state sequence."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid input."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "One or more states not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Update State Sequence",
        "tags": [
          "ProjectState"
        ]
      }
    },
    "/project/{project_id}/state/{state_id}": {
      "delete": {
        "description": "Delete the project state with the provided project and state ID.",
        "operationId": "deleteProjectState",
        "parameters": [
          {
            "description": "Unique identifier of the project.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the project state.",
            "in": "path",
            "name": "state_id",
            "required": true,
            "schema": {
              "example": "456e7890-e89b-12d3-a456-426614174111",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Project state deleted successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully deleted project state."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid project or state ID."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project or state not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Delete a project state by ID",
        "tags": [
          "ProjectState"
        ]
      },
      "get": {
        "description": "Retrieve the details of a project state by the provided project and state ID.",
        "operationId": "getProjectStateById",
        "parameters": [
          {
            "description": "Unique identifier of the project.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the project state.",
            "in": "path",
            "name": "state_id",
            "required": true,
            "schema": {
              "example": "456e7890-e89b-12d3-a456-426614174111",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProjectStateResponse"
                    },
                    "message": {
                      "example": "Project state retrieved successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully retrieved project state."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid project or state ID."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project or state not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Retrieve a project state by ID",
        "tags": [
          "ProjectState"
        ]
      },
      "put": {
        "description": "Update the details of a project state with the provided project and state ID.",
        "operationId": "updateProjectState",
        "parameters": [
          {
            "description": "Unique identifier of the project.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the project state.",
            "in": "path",
            "name": "state_id",
            "required": true,
            "schema": {
              "example": "456e7890-e89b-12d3-a456-426614174111",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectStateRequest"
              }
            }
          },
          "description": "Project state data to update the existing state.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProjectStateResponse"
                    },
                    "message": {
                      "example": "Project state updated successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully updated project state."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid input."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project or state not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Update an existing project state by ID",
        "tags": [
          "ProjectState"
        ]
      }
    },
    "/project/{project_id}/states": {
      "get": {
        "description": "Retrieve a paginated list of states for a specific project.",
        "operationId": "listProjectStates",
        "parameters": [
          {
            "description": "Unique identifier of the project.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The page number for pagination.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "type": "integer"
            }
          },
          {
            "description": "The number of items per page.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 10,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ProjectStateResponse"
                      },
                      "type": "array"
                    },
                    "message": {
                      "example": "Project states retrieved successfully.",
                      "type": "string"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully retrieved project states."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid input."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project or states not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "List all project states with pagination",
        "tags": [
          "ProjectState"
        ]
      }
    },
    "/projects": {
      "get": {
        "description": "Retrieve a paginated list of projects.",
        "operationId": "listProjects",
        "parameters": [
          {
            "description": "The page number for pagination.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "type": "integer"
            }
          },
          {
            "description": "The number of items per page.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 10,
              "type": "integer"
            }
          },
          {
            "description": "The name of the project.",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The emails of the project managers.",
            "in": "query",
            "name": "manager_emails",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "The country where the project is located.",
            "in": "query",
            "name": "country",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The current status of the project.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "Active",
                "Completed",
                "On Hold",
                "Cancelled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Field to sort results by (e.g., name, country, status)",
            "in": "query",
            "name": "sort_by",
            "required": false,
            "schema": {
              "enum": [
                "name",
                "country",
                "status"
              ],
              "type": "string"
            }
          },
          {
            "description": "Sort order (asc for ascending, desc for descending)",
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "default": "asc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ProjectResponse"
                      },
                      "type": "array"
                    },
                    "message": {
                      "example": "Projects retrieved successfully.",
                      "type": "string"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully retrieved projects"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid input"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "NotFound"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "List all projects with pagination",
        "tags": [
          "Project"
        ]
      }
    },
    "/projects/slug/{slug}": {
      "get": {
        "description": "Fetch project details based on its unique slug identifier.",
        "operationId": "getProjectBySlug",
        "parameters": [
          {
            "description": "A valid project slug (uppercase alphanumeric).",
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "pattern": "^[A-Z0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProjectResponse"
                    },
                    "message": {
                      "example": "Project retrieved successfully.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully retrieved project."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid slug."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Retrieve a project by slug",
        "tags": [
          "Project"
        ]
      }
    },
    "/projects/slug/{slug}/check": {
      "get": {
        "description": "Verify whether a project exists in the database based on its slug.",
        "operationId": "checkProjectSlug",
        "parameters": [
          {
            "description": "The unique slug identifier of the project.",
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Project with the given slug exists.",
                      "type": "string"
                    },
                    "success": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "The project with the given slug exists."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/BadRequest"
                }
              }
            },
            "description": "Bad request due to invalid project or label ID."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "description": "Unauthorized request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/Forbidden"
                }
              }
            },
            "description": "Forbidden request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "Project or label not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "summary": "Check if a project with the given slug exists",
        "tags": [
          "Project"
        ]
      }
    },
    "/version": {
      "get": {
        "description": "Retrieve the current version of the API.",
        "operationId": "getApiVersion",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "API version information",
                      "type": "string"
                    },
                    "version": {
                      "example": "v0.0.0",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully retrieved API version."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "description": "version route not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/InternalServerError"
                }
              }
            },
            "description": "Internal server error."
          }
        },
        "security": [],
        "summary": "Get API version",
        "tags": [
          "Version"
        ]
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "servers": [
    {
      "description": "Test server",
      "url": "https://test.projectmanagement.com/api/v1"
    },
    {
      "description": "Development server",
      "url": "https://dev.projectmanagement.com/api/v1"
    },
    {
      "description": "Production server",
      "url": "https://api.projectmanagement.com/api/v1"
    }
  ],
  "tags": [
    {
      "description": "Endpoints related to client management",
      "name": "Client"
    },
    {
      "description": "Endpoints related to project management",
      "name": "Project"
    },
    {
      "description": "Endpoints related to project state management",
      "name": "ProjectState"
    },
    {
      "description": "Endpoints related to project labeling",
      "name": "ProjectLabel"
    },
    {
      "description": "Endpoints related to project activity tracking",
      "name": "ProjectActivity"
    },
    {
      "description": "Endpoints related to project member management",
      "name": "ProjectMember"
    },
    {
      "description": "Endpoints related to project file management",
      "name": "ProjectFiles"
    },
    {
      "description": "Endpoints related to version management",
      "name": "Version"
    },
    {
      "description": "Endpoints related to system health checks",
      "name": "HealthCheck"
    },
    {
      "description": "Endpoints related to project issues",
      "name": "Issues"
    }
  ]
}